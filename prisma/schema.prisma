// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int      @id @default(autoincrement())
  user_username    String   @unique
  user_national_id Int      @unique
  user_password    String
  user_role        Role?
  Profile          Profile?
  Admin            Admin?
}

model Profile {
  profile_id           Int         @id @default(autoincrement())
  profile_full_name    String
  profile_description  String
  profile_phone_number String
  profile_email        String      @unique
  profile_status       Status
  profile_image        String
  profile_user         User        @relation(fields: [profile_user_id], onDelete: Cascade, references: [user_id])
  profile_user_id      Int         @unique
  Candidate            Candidate[]
  Voter                Voter[]
}

enum Status {
  active
  inactive
}

enum Role {
  user
  admin
}

model Candidate {
  candidate_id                Int      @id @default(autoincrement())
  candidate_vying_description String
  candidate_vying_position    String
  candidate_election          Election @relation(fields: [candidate_election_id], onDelete: Cascade, references: [election_id])
  candidate_election_id       Int
  candidate_profile           Profile  @relation(fields: [candidate_profile_id], onDelete: Cascade, references: [profile_id])
  candidate_profile_id        Int
  Vote                        Vote[]
  vote_count                  Int      @default(0)
  Result                      Result[]
}

model Voter {
  voter_id          Int      @id @default(autoincrement())
  voter_profile     Profile  @relation(fields: [voter_profile_id], onDelete: Cascade, references: [profile_id])
  voter_profile_id  Int
  voter_election    Election @relation(fields: [voter_election_id], onDelete: Cascade, references: [election_id])
  voter_election_id Int
  Vote              Vote[]
}

model Admin {
  admin_id        Int     @id @default(autoincrement())
  admin_full_name String
  admin_main      Boolean @default(false)
  admin_user      User    @relation(fields: [admin_user_id], onDelete: Cascade, references: [user_id])
  admin_user_id   Int     @unique
}

model Vote {
  vote_id                 Int       @id @default(autoincrement())
  vote_voter              Voter     @relation(fields: [vote_voter_id], onDelete: Cascade, references: [voter_id])
  vote_voter_id           Int
  vote_candidate          Candidate @relation(fields: [vote_candidate_id], onDelete: Cascade, references: [candidate_id])
  vote_candidate_id       Int
  vote_election           Election  @relation(fields: [vote_election_id], onDelete: Cascade, references: [election_id])
  vote_election_id        Int
  vote_candidate_position String

  @@unique([vote_voter_id, vote_candidate_id])
  @@unique([vote_voter_id, vote_election_id, vote_candidate_position])
}

model Election {
  election_id         Int            @id @default(autoincrement())
  election_name       String
  election_start_date DateTime
  election_end_date   DateTime
  election_status     ElectionStatus
  election_desription String
  Vote                Vote[]
  election_positions  String[]
  election_created_at DateTime       @default(now())
  Voter               Voter[]
  Candidate           Candidate[]
  Result              Result[]
  results_published   Boolean        @default(false)
}

model Result {
  result_id           Int       @id @default(autoincrement())
  result_election     Election  @relation(fields: [result_election_id], references: [election_id])
  result_election_id  Int
  result_position     String
  result_candidate    Candidate @relation(fields: [result_candidate_id], references: [candidate_id])
  result_candidate_id Int
  result_votes        Int       @default(0)
}

enum ElectionStatus {
  open
  closed
  upcoming
}
